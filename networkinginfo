
/*
struct sockaddr_in
{
	short            sin_family;   // e.g. AF_INET
	unsigned short   sin_port;     // e.g. htons(3490)
	struct in_addr   sin_addr;     // see struct in_addr, below
	char             sin_zero[8];  // zero this if you want to
};

struct in_addr
{
    unsigned long s_addr;  // load with inet_aton() for clients, and INADDR_ANY for servers
};

struct  hostent //gotten by gethostbyname(char*), if NULL then it was not found
{
        char    *h_name;        // official name of host
        char    **h_aliases;    // alias list
        int     h_addrtype;     // host address type
        int     h_length;       // length of address
        char    **h_addr_list;  // list of addresses from name server
#define h_addr  h_addr_list[0]  // address, for backward compatiblity
};

int getaddrinfo(
const char *node,     // e.g. "www.example.com" or IP
const char *service,  // e.g. "http" or port number
const struct addrinfo *hints,
struct addrinfo **res
);

memset(&addrinfo, 0, sizeof addrinfo); // make sure the struct is empty

struct addrinfo
{
	int              ai_flags;		//
	int              ai_family;		//AF_INET, AF_INET6, AF_UNSPEC
	int              ai_socktype;	//SOCK_STREAM, SOCK_DGRAM
	int              ai_protocol;	//
	socklen_t        ai_addrlen;	//
	struct sockaddr *ai_addr;		//
	char            *ai_canonname;	//
	struct addrinfo *ai_next;		//
};

struct sockaddr //casted to by sockaddr_in
{
	sa_family_t(unsigned int)	sa_family  //Address family.
	char         				sa_data[]  //Socket address (variable-length data).
}


*/
